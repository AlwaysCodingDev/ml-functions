name: Reusable Lambda Deploy

# Trigger
on:
  workflow_call:
  # Inputs: Parameters unique to each function (passed via 'with:' in the calling file)
    inputs:
      function-name:
        required: true
        type: string
        description: 'The AWS Lambda function name to update.'
      source-path:
        required: true
        type: string
        description: 'The path to the function source code (e.g., src/ai-agent).'
      zip-filename:
        required: true
        type: string
        description: 'The name of the zip artifact (e.g., ai-agent.zip).'
      policy_file_path:
        required: false
        type: string
        description: 'The name of the policy (e.g., dynamodbscan).'
      # s3-bucket-name:
      #   required: true
      #   type: string
      #   description: 'The S3 bucket where the ZIP file will be uploaded.'
      s3-key-prefix:
        required: false
        type: string
        default: '' # Default to root if no prefix is provided
        description: 'An optional folder path inside the S3 bucket (e.g., prod/)'
    # Secrets: AWS credentials
    secrets:
      AWS_REGION:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

jobs:
  # Single job that executes the deployment steps
  deploy-function:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install zip tool
      # Install necessary OS packages for zipping and Python dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y zip python3-pip

      - name: Install dependencies and prepare package
        # Install dependencies from requirements.txt into the source directory
        run: |
          pip install --upgrade pip
          pip install -r ${{ inputs.source-path }}/requirements.txt -t ${{ inputs.source-path }} 

      - name: Create Zip file for Lambda function
        # Zip the contents (including dependencies)
        run: |
          cd ${{ inputs.source-path }}
          zip -r ../../${{ inputs.zip-filename }} .

      - name: Configure AWS Credentials
        # Action to authenticate with AWS using secrets
        uses: aws-actions/configure-aws-credentials@v5
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # - name: Update AWS Lambda function
      #   # AWS CLI command to update the Lambda code
      #   run: |
      #     aws lambda update-function-code \
      #       --function-name ${{ inputs.function-name }} \
      #       --zip-file fileb://${{ inputs.zip-filename }}

      # Upload Zip to S3 ---
      - name: Upload deployment package to S3
        env:
          S3_KEY_PATH: ${{ inputs.s3-key-prefix }}${{ inputs.zip-filename }}
        run: |
          echo "Uploading ${{ inputs.zip-filename }} to s3://${{ secrets.s3-bucket-name }}/${S3_KEY_PATH}"
          aws s3 cp ${{ inputs.zip-filename }} s3://${{ secrets.s3-bucket-name }}/${S3_KEY_PATH}
      # ------------------------------------

      - name: Update AWS Lambda function
        # AWS CLI command now uses the S3 bucket and key parameters
        env:
          S3_KEY_PATH: ${{ inputs.s3-key-prefix }}${{ inputs.zip-filename }}
        run: |
          aws lambda update-function-code \
            --function-name ${{ inputs.function-name }} \
            --s3-bucket ${{ secrets.s3-bucket-name }} \
            --s3-key ${S3_KEY_PATH}      

      - name: Attach policy
        # The 'if' conditional checks if the input is non-empty.
        if: ${{ inputs.policy_file_path != '' }}
        run: |
          python ${{ inputs.source-path }}/${{ inputs.policy_file_path }}


      